// <auto-generated />
using System;
using LoveAtFirstSight.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LoveAtFirstSight.Migrations
{
    [DbContext(typeof(LoveAtFirstSightDbContext))]
    partial class LoveAtFirstSightDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LoveAtFirstSight.Models.Adopted", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalId")
                        .HasColumnType("integer");

                    b.Property<bool>("Foster")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("TimeOfAdoption")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Adoptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnimalId = 3,
                            Foster = false,
                            TimeOfAdoption = new DateTime(2023, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 2,
                            AnimalId = 2,
                            Foster = true,
                            TimeOfAdoption = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 3,
                            AnimalId = 5,
                            Foster = false,
                            TimeOfAdoption = new DateTime(2023, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 4,
                            AnimalId = 6,
                            Foster = true,
                            TimeOfAdoption = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 5,
                            AnimalId = 8,
                            Foster = true,
                            TimeOfAdoption = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 6,
                            AnimalId = 13,
                            Foster = true,
                            TimeOfAdoption = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 7,
                            AnimalId = 16,
                            Foster = true,
                            TimeOfAdoption = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 8,
                            AnimalId = 17,
                            Foster = true,
                            TimeOfAdoption = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 9,
                            AnimalId = 20,
                            Foster = true,
                            TimeOfAdoption = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 10,
                            AnimalId = 23,
                            Foster = true,
                            TimeOfAdoption = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 11,
                            AnimalId = 30,
                            Foster = true,
                            TimeOfAdoption = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 12,
                            AnimalId = 9,
                            Foster = false,
                            TimeOfAdoption = new DateTime(2024, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 13,
                            AnimalId = 11,
                            Foster = false,
                            TimeOfAdoption = new DateTime(2023, 8, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 14,
                            AnimalId = 15,
                            Foster = false,
                            TimeOfAdoption = new DateTime(2023, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 15,
                            AnimalId = 29,
                            Foster = false,
                            TimeOfAdoption = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserProfileId = 4
                        });
                });

            modelBuilder.Entity("LoveAtFirstSight.Models.Animal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<bool>("Available")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Fostered")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDog")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMale")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UrlPic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Animals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 1,
                            Available = true,
                            DateAdded = new DateTime(2023, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fostered = false,
                            IsDog = true,
                            IsMale = false,
                            Name = "Ruby",
                            UrlPic = "https://i.pinimg.com/736x/5f/9c/ff/5f9cff29b653ac04d6d5fb3d317ca268.jpg"
                        },
                        new
                        {
                            Id = 2,
                            Age = 1,
                            Available = true,
                            DateAdded = new DateTime(2023, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fostered = true,
                            IsDog = true,
                            IsMale = true,
                            Name = "Baron",
                            UrlPic = "https://i.pinimg.com/736x/2c/52/e9/2c52e9e6ecb5d8fd9d3b6426c6a22684.jpg"
                        },
                        new
                        {
                            Id = 3,
                            Age = 2,
                            Available = false,
                            DateAdded = new DateTime(2023, 8, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fostered = false,
                            IsDog = true,
                            IsMale = true,
                            Name = "Lynyrd",
                            UrlPic = "https://i.pinimg.com/736x/ce/b9/78/ceb9786a73f06208c1fbb76d91e94cc1.jpg"
                        },
                        new
                        {
                            Id = 4,
                            Age = 1,
                            Available = true,
                            DateAdded = new DateTime(2023, 12, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fostered = false,
                            IsDog = false,
                            IsMale = false,
                            Name = "Storm",
                            UrlPic = "https://i.pinimg.com/736x/aa/ff/48/aaff4805200a41a4caa46a222b16d51c.jpg"
                        },
                        new
                        {
                            Id = 5,
                            Age = 2,
                            Available = false,
                            DateAdded = new DateTime(2023, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fostered = false,
                            IsDog = false,
                            IsMale = false,
                            Name = "Elena",
                            UrlPic = "https://i.pinimg.com/736x/39/55/fb/3955fb5e4a3168fae68c51696ee94f1e.jpg"
                        },
                        new
                        {
                            Id = 6,
                            Age = 1,
                            Available = false,
                            DateAdded = new DateTime(2023, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fostered = true,
                            IsDog = false,
                            IsMale = false,
                            Name = "Cloud",
                            UrlPic = "https://i.pinimg.com/736x/28/8b/fa/288bfa66c76c39834fc3c6f53b5ccb02.jpg"
                        },
                        new
                        {
                            Id = 7,
                            Age = 4,
                            Available = true,
                            DateAdded = new DateTime(2024, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fostered = true,
                            IsDog = false,
                            IsMale = true,
                            Name = "Macaroni",
                            UrlPic = "https://i.pinimg.com/736x/5f/94/1e/5f941eef60452df3f0ac34aec60fcb40.jpg"
                        },
                        new
                        {
                            Id = 8,
                            Age = 2,
                            Available = true,
                            DateAdded = new DateTime(2023, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fostered = true,
                            IsDog = true,
                            IsMale = true,
                            Name = "Cupid",
                            UrlPic = "https://i.pinimg.com/736x/9f/82/9e/9f829e14c2d024d182500ba2944787cc.jpg"
                        },
                        new
                        {
                            Id = 9,
                            Age = 3,
                            Available = false,
                            DateAdded = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fostered = false,
                            IsDog = true,
                            IsMale = true,
                            Name = "Buddy",
                            UrlPic = "https://i.pinimg.com/736x/7b/4e/b8/7b4eb8590d0cd613c4dfa9d56430d19d.jpg"
                        },
                        new
                        {
                            Id = 10,
                            Age = 2,
                            Available = true,
                            DateAdded = new DateTime(2024, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fostered = true,
                            IsDog = false,
                            IsMale = false,
                            Name = "Leopard",
                            UrlPic = "https://i.pinimg.com/736x/55/a0/95/55a095b943469a92a210911a6ac33f50.jpg"
                        },
                        new
                        {
                            Id = 11,
                            Age = 1,
                            Available = false,
                            DateAdded = new DateTime(2023, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fostered = false,
                            IsDog = false,
                            IsMale = false,
                            Name = "Cupcake",
                            UrlPic = "https://i.pinimg.com/736x/a8/5a/ac/a85aac5eb0339960d60b5f7d05a39c70.jpg"
                        },
                        new
                        {
                            Id = 12,
                            Age = 5,
                            Available = true,
                            DateAdded = new DateTime(2024, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fostered = true,
                            IsDog = false,
                            IsMale = true,
                            Name = "Finn",
                            UrlPic = "https://i.pinimg.com/736x/53/b7/b2/53b7b2db9a65660a2fab522b25fedf30.jpg"
                        },
                        new
                        {
                            Id = 13,
                            Age = 3,
                            Available = true,
                            DateAdded = new DateTime(2023, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fostered = true,
                            IsDog = true,
                            IsMale = false,
                            Name = "Pearl",
                            UrlPic = "https://i.pinimg.com/736x/3d/b2/f4/3db2f49640bd254b5cff5c51b0d0dc8d.jpg"
                        },
                        new
                        {
                            Id = 14,
                            Age = 4,
                            Available = true,
                            DateAdded = new DateTime(2023, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fostered = false,
                            IsDog = true,
                            IsMale = true,
                            Name = "Snowball",
                            UrlPic = "https://i.pinimg.com/736x/d9/a7/38/d9a73802a827bfc7c30e157818e219fc.jpg"
                        },
                        new
                        {
                            Id = 15,
                            Age = 8,
                            Available = false,
                            DateAdded = new DateTime(2023, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fostered = true,
                            IsDog = true,
                            IsMale = true,
                            Name = "Jiro",
                            UrlPic = "https://i.pinimg.com/736x/b8/d8/69/b8d869e8b81e6f6467c06d6fe01d2e5d.jpg"
                        },
                        new
                        {
                            Id = 16,
                            Age = 4,
                            Available = true,
                            DateAdded = new DateTime(2023, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fostered = false,
                            IsDog = true,
                            IsMale = true,
                            Name = "Snowball",
                            UrlPic = "https://i.pinimg.com/736x/d9/a7/38/d9a73802a827bfc7c30e157818e219fc.jpg"
                        },
                        new
                        {
                            Id = 17,
                            Age = 2,
                            Available = true,
                            DateAdded = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fostered = true,
                            IsDog = true,
                            IsMale = true,
                            Name = "Jack",
                            UrlPic = "https://i.pinimg.com/736x/d1/4f/61/d14f617b6f985844084f4ba56beaaaaa.jpg"
                        },
                        new
                        {
                            Id = 18,
                            Age = 3,
                            Available = true,
                            DateAdded = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fostered = false,
                            IsDog = true,
                            IsMale = true,
                            Name = "Oreo",
                            UrlPic = "https://i.pinimg.com/736x/43/cf/bc/43cfbcfa2af3159d9ef1bd1f7c125ee5.jpg"
                        },
                        new
                        {
                            Id = 19,
                            Age = 2,
                            Available = true,
                            DateAdded = new DateTime(2024, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fostered = true,
                            IsDog = false,
                            IsMale = false,
                            Name = "Ladybug",
                            UrlPic = "https://i.pinimg.com/736x/11/56/5f/11565fefe92d0b3201708f4800bcf447.jpg"
                        },
                        new
                        {
                            Id = 20,
                            Age = 4,
                            Available = true,
                            DateAdded = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fostered = true,
                            IsDog = true,
                            IsMale = true,
                            Name = "Ross",
                            UrlPic = "https://i.pinimg.com/736x/44/c7/1a/44c71acc470ed8a620ffe38333da967f.jpg"
                        },
                        new
                        {
                            Id = 21,
                            Age = 2,
                            Available = true,
                            DateAdded = new DateTime(2023, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fostered = true,
                            IsDog = false,
                            IsMale = true,
                            Name = "David",
                            UrlPic = "https://i.pinimg.com/736x/45/03/3e/45033e9bd60171960fb433c234e8d080.jpg"
                        },
                        new
                        {
                            Id = 22,
                            Age = 4,
                            Available = true,
                            DateAdded = new DateTime(2023, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fostered = false,
                            IsDog = false,
                            IsMale = true,
                            Name = "Pumpkin",
                            UrlPic = "https://i.pinimg.com/736x/e7/6e/57/e76e572bdf56f3701bc727f522a9a3a0.jpg"
                        },
                        new
                        {
                            Id = 23,
                            Age = 2,
                            Available = true,
                            DateAdded = new DateTime(2024, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fostered = true,
                            IsDog = true,
                            IsMale = false,
                            Name = "Rapunzel",
                            UrlPic = "https://i.pinimg.com/736x/31/d5/57/31d557a89c7ca9be7bca40a9723f4414.jpg"
                        },
                        new
                        {
                            Id = 24,
                            Age = 2,
                            Available = true,
                            DateAdded = new DateTime(2023, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fostered = false,
                            IsDog = false,
                            IsMale = false,
                            Name = "Silver",
                            UrlPic = "https://i.pinimg.com/736x/1a/1b/64/1a1b64fcf14ec02ed90238e18605cb72.jpg"
                        },
                        new
                        {
                            Id = 25,
                            Age = 2,
                            Available = true,
                            DateAdded = new DateTime(2024, 1, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fostered = false,
                            IsDog = false,
                            IsMale = false,
                            Name = "Jade",
                            UrlPic = "https://i.pinimg.com/736x/de/dc/03/dedc03adc361892786996d4a77c9a30e.jpg"
                        },
                        new
                        {
                            Id = 26,
                            Age = 4,
                            Available = true,
                            DateAdded = new DateTime(2023, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fostered = false,
                            IsDog = true,
                            IsMale = false,
                            Name = "Cider",
                            UrlPic = "https://i.pinimg.com/736x/40/4f/7e/404f7ef751fbaec6e37281fc7034a7a2.jpg"
                        },
                        new
                        {
                            Id = 27,
                            Age = 2,
                            Available = true,
                            DateAdded = new DateTime(2024, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fostered = false,
                            IsDog = true,
                            IsMale = false,
                            Name = "Muppet",
                            UrlPic = "https://i.pinimg.com/736x/b5/c2/35/b5c235e7095d6e872bb41c569d23939a.jpg"
                        },
                        new
                        {
                            Id = 28,
                            Age = 2,
                            Available = true,
                            DateAdded = new DateTime(2023, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fostered = false,
                            IsDog = false,
                            IsMale = false,
                            Name = "Asteroid",
                            UrlPic = "https://i.pinimg.com/736x/98/e8/67/98e867f4170dd56072a03600600f1788.jpg"
                        },
                        new
                        {
                            Id = 29,
                            Age = 2,
                            Available = false,
                            DateAdded = new DateTime(2023, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fostered = false,
                            IsDog = false,
                            IsMale = false,
                            Name = "Raven",
                            UrlPic = "https://i.pinimg.com/736x/bf/e7/f2/bfe7f281036371a171331b280f967fb6.jpg"
                        },
                        new
                        {
                            Id = 30,
                            Age = 3,
                            Available = true,
                            DateAdded = new DateTime(2023, 10, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fostered = true,
                            IsDog = true,
                            IsMale = false,
                            Name = "Lou",
                            UrlPic = "https://i.pinimg.com/736x/f4/66/5d/f4665db0b5b001a6b2064eeca673e52d.jpg"
                        });
                });

            modelBuilder.Entity("LoveAtFirstSight.Models.AnimalBreed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalId")
                        .HasColumnType("integer");

                    b.Property<int>("BreedId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("BreedId");

                    b.ToTable("AnimalBreeds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnimalId = 1,
                            BreedId = 5
                        },
                        new
                        {
                            Id = 2,
                            AnimalId = 1,
                            BreedId = 9
                        },
                        new
                        {
                            Id = 3,
                            AnimalId = 2,
                            BreedId = 3
                        },
                        new
                        {
                            Id = 4,
                            AnimalId = 2,
                            BreedId = 4
                        },
                        new
                        {
                            Id = 5,
                            AnimalId = 3,
                            BreedId = 5
                        },
                        new
                        {
                            Id = 6,
                            AnimalId = 3,
                            BreedId = 6
                        },
                        new
                        {
                            Id = 7,
                            AnimalId = 4,
                            BreedId = 12
                        },
                        new
                        {
                            Id = 8,
                            AnimalId = 4,
                            BreedId = 13
                        },
                        new
                        {
                            Id = 9,
                            AnimalId = 5,
                            BreedId = 14
                        },
                        new
                        {
                            Id = 10,
                            AnimalId = 5,
                            BreedId = 15
                        },
                        new
                        {
                            Id = 11,
                            AnimalId = 6,
                            BreedId = 12
                        });
                });

            modelBuilder.Entity("LoveAtFirstSight.Models.Breed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDog")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Breeds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDog = true,
                            Name = "English BullDog"
                        },
                        new
                        {
                            Id = 2,
                            IsDog = true,
                            Name = "Labrador Retriever"
                        },
                        new
                        {
                            Id = 3,
                            IsDog = true,
                            Name = "Golden Retriever"
                        },
                        new
                        {
                            Id = 4,
                            IsDog = true,
                            Name = "Bulldog"
                        },
                        new
                        {
                            Id = 5,
                            IsDog = true,
                            Name = "Beagle"
                        },
                        new
                        {
                            Id = 6,
                            IsDog = true,
                            Name = "Rottweiler"
                        },
                        new
                        {
                            Id = 7,
                            IsDog = true,
                            Name = "Shih Tzu"
                        },
                        new
                        {
                            Id = 8,
                            IsDog = true,
                            Name = "Yorkshire Terrier"
                        },
                        new
                        {
                            Id = 9,
                            IsDog = true,
                            Name = "Boxer"
                        },
                        new
                        {
                            Id = 10,
                            IsDog = true,
                            Name = "Border Collie"
                        },
                        new
                        {
                            Id = 11,
                            IsDog = true,
                            Name = "Siberian Husky"
                        },
                        new
                        {
                            Id = 12,
                            IsDog = false,
                            Name = "Persian Cat"
                        },
                        new
                        {
                            Id = 13,
                            IsDog = false,
                            Name = "Siamese Cat"
                        },
                        new
                        {
                            Id = 14,
                            IsDog = false,
                            Name = "Maine Coon"
                        },
                        new
                        {
                            Id = 15,
                            IsDog = false,
                            Name = "Abyssinian Cat"
                        },
                        new
                        {
                            Id = 16,
                            IsDog = false,
                            Name = "Bengal Cat"
                        },
                        new
                        {
                            Id = 17,
                            IsDog = false,
                            Name = "Bombay Cat"
                        },
                        new
                        {
                            Id = 18,
                            IsDog = false,
                            Name = "Cornish Rex Cat"
                        },
                        new
                        {
                            Id = 19,
                            IsDog = false,
                            Name = "Egyptian Mau Cat"
                        },
                        new
                        {
                            Id = 20,
                            IsDog = false,
                            Name = "Exotic Shorthair Cat"
                        },
                        new
                        {
                            Id = 21,
                            IsDog = false,
                            Name = "Havana Brown Cat"
                        },
                        new
                        {
                            Id = 22,
                            IsDog = false,
                            Name = "Scottish Fold Cat"
                        },
                        new
                        {
                            Id = 23,
                            IsDog = false,
                            Name = "Sphynx Cat"
                        });
                });

            modelBuilder.Entity("LoveAtFirstSight.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Employee")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "101 Main Street",
                            Email = "admina@strator.comx",
                            Employee = true,
                            FullName = "Admina Strator",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Address = "5165 Crosswood dr.",
                            Email = "rachelmdominie@example.com",
                            Employee = false,
                            FullName = "Rachel Dominie",
                            IdentityUserId = "5678efgh-0829-4ac5-a3ed-180f5e916a5f",
                            UserName = "RachelD"
                        },
                        new
                        {
                            Id = 3,
                            Address = "456 Main Street",
                            Email = "elizabethspencer@example.com",
                            Employee = false,
                            FullName = "Elizabeth Spencer",
                            IdentityUserId = "9012ijkl-0829-4ac5-a3ed-180f5e916a5f",
                            UserName = "ElizabethS"
                        },
                        new
                        {
                            Id = 4,
                            Address = "456 Main Street",
                            Email = "mattspencer@example.com",
                            Employee = false,
                            FullName = "Matt Spencer",
                            IdentityUserId = "2013iqkp-0829-4ac5-a3ed-180f5e916a5f",
                            UserName = "MattS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "abcdefgh-0829-4ac5-a3ed-180f5e916a5f",
                            Name = "User",
                            NormalizedName = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5409ac94-921f-4156-8b13-741be290dde6",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEKfTJ4MHCGEd4jOACOIzfHtxhM0O1iPyik0UWH+j6ad1HclpCVVwKRYliutktD1E9Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "092cb7b5-1b41-45ca-8298-aaf68bab6f08",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "5678efgh-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "81f7bee7-13ff-465a-a4e4-44921720f45b",
                            Email = "rachelmdominie@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEB48JWLx++5glS9Z/nnkJp/x1VzKROpkL4XeYx4d6PpLHt/JGhtSp4egSuZuBNAeKw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "60526c47-54e4-4203-b855-78f9e5bf3c4a",
                            TwoFactorEnabled = false,
                            UserName = "RachelD"
                        },
                        new
                        {
                            Id = "9012ijkl-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "639ec9d7-b9be-4d4c-addb-452659709d33",
                            Email = "elizabethspencer@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEAlvVbc+STFTIoY2yhi+MffwQw/XaMK+E2RxnCy/K9HajwXgvkwU8xux2kvWgAKDeA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "69c8c235-f616-4554-b3d4-51ffe6d8fd58",
                            TwoFactorEnabled = false,
                            UserName = "ElizabethS"
                        },
                        new
                        {
                            Id = "2013iqkp-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "81ecf115-bf71-4752-83b9-5891afb82065",
                            Email = "mattspencer@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJwgQNdkBGKF+i0chea8uVAbBgfIBuciT7fMWauxVAOMYX6dvFyZXIF2cM/QdWso7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7ba684c7-8397-478a-8514-10e1615808ba",
                            TwoFactorEnabled = false,
                            UserName = "MattS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "5678efgh-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "abcdefgh-0829-4ac5-a3ed-180f5e916a5f"
                        },
                        new
                        {
                            UserId = "9012ijkl-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "abcdefgh-0829-4ac5-a3ed-180f5e916a5f"
                        },
                        new
                        {
                            UserId = "2013iqkp-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "abcdefgh-0829-4ac5-a3ed-180f5e916a5f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LoveAtFirstSight.Models.Adopted", b =>
                {
                    b.HasOne("LoveAtFirstSight.Models.Animal", "Animal")
                        .WithMany("Adoptions")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoveAtFirstSight.Models.UserProfile", "UserProfile")
                        .WithMany("Adoptions")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("LoveAtFirstSight.Models.AnimalBreed", b =>
                {
                    b.HasOne("LoveAtFirstSight.Models.Animal", "Animal")
                        .WithMany("AnimalBreeds")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoveAtFirstSight.Models.Breed", "Breed")
                        .WithMany("AnimalBreeds")
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Breed");
                });

            modelBuilder.Entity("LoveAtFirstSight.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LoveAtFirstSight.Models.Animal", b =>
                {
                    b.Navigation("Adoptions");

                    b.Navigation("AnimalBreeds");
                });

            modelBuilder.Entity("LoveAtFirstSight.Models.Breed", b =>
                {
                    b.Navigation("AnimalBreeds");
                });

            modelBuilder.Entity("LoveAtFirstSight.Models.UserProfile", b =>
                {
                    b.Navigation("Adoptions");
                });
#pragma warning restore 612, 618
        }
    }
}
